<h1>Welcome to Meadowlark Travel</h1>
<p>Hope your vacation is better than most!</p>

<h2>Type of tests</h2>
<p>Falls in 2 categories: unit testing and intgration testing.</p>
<p>Unit testing is very fined-grained, testing single components to make sure they function properly. Integration testing tests the inteaction between multiple components, or even the whole system.</p>
HTTP Request Methods
<p>The HTTP protocol defines a collection of "request methods" often refreed to as HTTP verbs, that a client uses to communicate with a server. Far and away, the most common methods are GET and POST.</p>
<p>When you type a URL into a browser (or click a link), the browser issues an HTTP GET request to the server. The important information passed to the server is the URL path and querystring. The combination of method, path, and querystring is what your app uses to determine how to respond.</p>
<p>For a website, most of your pages will respond to GET requests. POST requests are usually reserved for sending information back to the server (form processing, for example). It’s quite common for POST requests to respond with the same HTML as the corresponding GET request after the server has processed any information included in the request, like a form.</p>
<p>Web services, on the other hand, often get more creative with the HTTP methods used. For example, there’s an HTTP method called DELETE that is useful for, well, an API call that deletes things.</p>
<p>With Node and Express, you are fully in charge of what methods you respond to. In Express, you’ll usually be writing handlers for specific methods.</p>

<h2>Handlebars Basics</h2>
For example, if my context object is { name: 'Buttercup' }, and my template is

	<p>Hello, {{name}}!</p>, {{name}}

	

will be replaced with Buttercup. What if you want to pass HTML to the template? For example, if our context was instead

	{ name:'<b>Buttercup</b>' }

using the previous template will result in 

<p>Hello,&lt;b&gt;Buttercup&lt;b&gt;</p>

which is probably not what you’re looking for. To solve this problem, simply use three curly brackets instead of two:

	{{{name}}}

<h3>Foo</h3>
Hello {{{world}}}.
#############

<h3>Comments</h3>
<p>Comments in Handlebars look like {{! comment goes here }}. It’s important to understand
the distinction between Handlebars comments and HTML comments. Consider
the following template:
{{! super-secret comment }}
<!-- not-so-secret comment -->
Assuming this is a server-side template, the super-secret comment will never be sent to
the browser, whereas the not-so-secret comment will be visible if the user inspects the
HTML source. You should prefer Handlebars comments for anything that exposes implementation
details, or anything else you don’t want exposed.</p>
 






